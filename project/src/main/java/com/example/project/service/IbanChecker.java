package com.example.project.service;


import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

@Service
public class IbanChecker {
    private static final List<String> BLACKLISTED_IBANS = List.of(
            "DE89370400440532013000",
            "FR7630006000011234567890189"
    );



    public String checkIbanInDocument(String documentUrl) {
        try (PDDocument document = loadDocument(documentUrl)) {
            if (document == null) {
                return "Error: Unable to load document.";
            }

            String pdfText = extractTextFromDocument(document);
            return findBlacklistedIban(pdfText);
        } catch (IOException e) {
            return handleDocumentProcessingException(e);
        }
    }

    private PDDocument loadDocument(String documentUrl) throws IOException {
        if (documentUrl.startsWith("http://") || documentUrl.startsWith("https://")) {
            return PDDocument.load(new URL(documentUrl).openStream());
        } else {
            return PDDocument.load(new File(documentUrl));
        }
    }

    private String extractTextFromDocument(PDDocument document) throws IOException {
        PDFTextStripper stripper = new PDFTextStripper();
        return stripper.getText(document);
    }

    private String findBlacklistedIban(String pdfText) {
        for (String iban : BLACKLISTED_IBANS) {
            if (pdfText.contains(iban)) {
                return iban; // Return the blacklisted IBAN found
            }
        }
        return "No blacklisted IBAN found";
    }

    private String handleDocumentProcessingException(IOException e) {
        if (e instanceof MalformedURLException) {
            return "Error: The provided URL is malformed.";
        } else {
            return "Error: Unable to read or process the document.";
        }
    }
}
